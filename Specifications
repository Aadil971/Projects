Python is well-known as a language that excels at data manipulation and visualization. There are many powerful tools built for Python which allow up to process large datasets to find, isolate, and present patterns within the data. We call the process of taking raw data and transforming it into a format we can work with "data wrangling". This is often required when working with graphing libraries, as they may expect data to be provided in a specific format. For your third portfolio project, you are being asked to design a terminal-based application for calculating and visualizing information from a Spotify dataset. The provided data includes top streamed songs in the first half of 2023 and various features about those songs.

Your application must meet the following design specifications:

Prompt the user to enter a song feature based on the provided menu (already coded in the given template).
Some menu options do not need to be developed. If the user enters 0, 1, 5 or 6, nothing should happen and the user should be prompted for their next entry.
Menu option 2: If the user enters 2, calculate the total span of release years that are included in the data. Then output the artist, key, and mode of the oldest song using the required format (see screenshots below). This calculation/analysis must be done in a function called age_stats that accepts the menu input value and prints the required information. It should not return any values.
Menu options 3, 4, 7, 8, 9, 10, 11, 12, 13: For each of these menu options, calculate the highest value, lowest value, and mean value of the desired song feature. These calculations must be done in a function called feature_stats that accepts the menu input value and prints the required information. The function should return the index location of the highest value, which should then be used to find and print the title of the song with the highest value.
If the user enters -1, the entry loop should end and move to the plotting stage.
If the user enters a value outside of the provided range, the user should be warned and prompted to try again: "You must enter a valid menu option."
To conclude the data analysis, generate a plot of danceability vs. beats per minute of all songs. Your plot formatting should match the given example below.
Your plot will be graded manually. You should save a .png version of your plot and upload it into your working directory. Your code must output the same plot that was uploaded.
A screenshot with example terminal and plot behaviour is included below the rubric. Your output should match the given format exactly.
The function stubs are provided in the given template- you must use the given name and argument/return value structure as written here. Your functions may not access global variables aside from those presented in the data section.
Your code must follow the conventions discussed so far in the course (names_with_underscores, four spaces for indentations, spaces between variables/operators, comments throughout, etc.). All functions and classes must include docstring documentation. You may only use built-in Python functions that support compound data structures, user entry, or casting (such as len(), input() or int()). You may use any NumPy and Matplotlib functions. You may not import any modules beyond the those specified in the template.
Data notes: All data is imported from the included csv file. You may not modify the content, order, or location of the csv file. Your code may be tested against a different data file. You may not hardcode (manually add into the code) any data values beyond those given in the data section.

Plotting notes: To view your matplotlib output, you will need to click on "Open Desktop" in the top, right-hand corner of the environment window. This will open a simulated desktop where you can view and save your plot directly in the working directory. If you see the following warning in the terminal, you may ignore it: QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-mysql'

Bonus Specifications:
For optional bonus marks that may be applied to your total course grade, the following additional tasks may be completed:

Create a Song class that constructs a Song object when given a single row of data. Each column should be saved as an attribute. Title, artist, key, and mode should be saved as strings. The remaining ten features should be saved as float values. Another attribute called "percentages" should be defined as a list containing all of the values for danceability through to speechiness.
After the required plot, the user should be prompted to enter any row number (you may assume that only valid entries will be given). Create a Song object from the data located at the given row. The row value corresponds to the numpy array, not to the original spreadsheet.
Use the Song object to plot the percentage values (danceability through speechiness) as a bar graph for the chosen song. Your plot formatting should match the given example below.
Your plot will be graded manually. You should save a .png version of your plot and upload it into your working directory. Your code must output the same plot that was uploaded.
Remember to document your class!